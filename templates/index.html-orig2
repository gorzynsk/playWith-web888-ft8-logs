<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Map with Spots</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css"/>
    <style>
        #map {
            height: 600px;
            width: 100%;
        }
        .leaflet-tooltip {
            background-color: rgba(255, 255, 255, 0.7);
            font-size: 14px;
            padding: 3px;
            border-radius: 3px;
            box-shadow: 0px 0px 5px rgba(0, 0, 0, 0.2);
        }
        .tooltip-content {
            font-size: 14px; /* Callsign size */
        }
        .tooltip-frequency {
            font-size: 12px; /* Smaller text for frequency */
            color: #666;
        }
    </style>
</head>
<body>
    <h1>Radio Spot Locations - last 30 minutes </h1>
    <div id="map"></div>
    
    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
    <script>
        // Create a map centered around a general location
        var map = L.map('map').setView([41.0, 28.0], 2); // Default view: [latitude, longitude], zoom level

        // Set the tile layer (OpenStreetMap)
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(map);

        // Frequency to color mapping
        const frequencyColors = {
            3: 'brown',
            7: 'red',
            10: 'blue',
            14: 'orange',
            18: 'yellow',
            21: 'purple',
            28: 'green'
        };

        // Function to generate a random color
        function getRandomColor() {
            const letters = '0123456789ABCDEF';
            let color = '#';
            for (let i = 0; i < 6; i++) {
                color += letters[Math.floor(Math.random() * 16)];
            }
            return color;
        }

        // Cache for random colors to ensure consistency for the same frequency
        let randomColorCache = {};

        // Function to get the color for a specific frequency
        function getFrequencyColor(frequency) {
            // Normalize frequency (e.g., for 7.074 MHz, we want 7)
            let freqKey = Math.round(frequency);

            // Check if the frequency has a defined color
            if (frequencyColors[freqKey]) {
                return frequencyColors[freqKey];
            }

            // If it's an undefined frequency, check cache for a random color
            if (!randomColorCache[freqKey]) {
                randomColorCache[freqKey] = getRandomColor();
            }

            return randomColorCache[freqKey];
        }

        // Function to fetch spots and update map
        function fetchSpots() {
            // Use the current origin (protocol + host + port) from the browser and append /spots
            const spotsUrl = window.location.origin + '/spots';

            fetch(spotsUrl)
                .then(response => response.json())
                .then(data => {
                    // Clear existing markers
                    map.eachLayer(function(layer) {
                        if (layer instanceof L.Marker) {
                            map.removeLayer(layer);
                        }
                    });

                    // Add new markers to map
                    data.forEach(spot => {
                        var lat = spot.coordinates[0];
                        var lon = spot.coordinates[1];
                        var callsign = spot.callsign;
                        var frequency = spot.frequency / 1000; // Divide frequency by 1000

                        // Format frequency to 3 decimal places
                        var formattedFrequency = frequency.toFixed(3);

                        // Get the color for this frequency
                        var markerColor = getFrequencyColor(frequency);

                        // Create a very small dot marker with the callsign and frequency next to it
                        var marker = L.circleMarker([lat, lon], {
                            radius: 3, // Smaller dot size
                            fillColor: markerColor,
                            color: markerColor,
                            weight: 2,
                            opacity: 1,
                            fillOpacity: 0.7
                        }).addTo(map);

                        // Create the tooltip content with both callsign and frequency
                        var tooltipContent = '<div class="tooltip-content">' + callsign + 
                                             '<div class="tooltip-frequency">(' + formattedFrequency + ' MHz)</div>'+ 
                                              'Time:'+
                                              '</div>';

                        // Add a tooltip with the callsign and frequency
                        marker.bindTooltip(tooltipContent, {
                            direction: 'right',
                            offset: [8, 0], // position the tooltip slightly to the right of the dot
                            sticky: false  // Tooltip only appears on hover
                        });
                    });
                })
                .catch(error => console.error('Error fetching spots:', error));
        }

        // Initial fetch when the page loads
        fetchSpots();

        // Fetch every 10 seconds
        setInterval(fetchSpots, 10000);
    </script>
</body>
</html>
